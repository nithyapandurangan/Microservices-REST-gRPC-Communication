#gRPC Producer
# This is the producer service. It generates data and sends it to the aggregator service.
from concurrent import futures
import grpc
import services_pb2
import services_pb2_grpc
from grpc_reflection.v1alpha import reflection 

class ProducerService(services_pb2_grpc.ProducerServiceServicer):
    def Generate(self, request, context):
        return services_pb2.Data(content="Generated by Service 1")

def serve():
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    services_pb2_grpc.add_ProducerServiceServicer_to_server(ProducerService(), server)
    server.add_insecure_port('[::]:50051')

    SERVICE_NAMES = (
        services_pb2.DESCRIPTOR.services_by_name['ProducerService'].full_name,
        reflection.SERVICE_NAME,  
    )
    reflection.enable_server_reflection(SERVICE_NAMES, server)

    server.start()
    server.wait_for_termination()

if __name__ == "__main__":
    serve()
